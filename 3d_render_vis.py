"""
Local OBJ file export for sampled 3DPW-TEST data.
Find original images from local 3DPW-TEST dataset.
"""
import numpy as np
from pathlib import Path
import os
import argparse
from tqdm import tqdm
import cv2
from PIL import Image

def save_mesh_as_obj(vertices, faces, filename, mesh_name="mesh"):
    """Save mesh as OBJ file with proper face data."""
    try:
        with open(filename, 'w') as f:
            f.write(f"# 3D Human Mesh Export\n")
            f.write(f"# Generated by ScoreHMR Visualization\n")
            f.write(f"o {mesh_name}\n\n")
            
            # Write vertices
            for i, v in enumerate(vertices):
                f.write(f"v {v[0]:.6f} {v[1]:.6f} {v[2]:.6f}\n")
            
            f.write("\n")
            
            # Write faces (OBJ format uses 1-based indexing)
            if faces is not None and len(faces) > 0:
                for face in faces:
                    if len(face) >= 3:
                        f.write(f"f {face[0]+1} {face[1]+1} {face[2]+1}\n")
            
            f.write("\n")
        return True
    except Exception as e:
        print(f"Failed to save OBJ {filename}: {e}")
        return False

def find_original_image_3dpw(img_name, img_dir):
    """Find original image in 3DPW dataset structure."""
    # Try multiple possible paths
    possible_paths = [
        os.path.join(img_dir, img_name),  # Direct path: img_dir/courtyard_arguing_00/image_00000.jpg
        os.path.join(img_dir, "imageFiles", img_name),  # With imageFiles: img_dir/imageFiles/courtyard_arguing_00/image_00000.jpg
    ]
    
    # Also try extracting sequence and filename
    if '/' in img_name:
        sequence_name = Path(img_name).parent.name
        file_name = Path(img_name).name
        possible_paths.extend([
            os.path.join(img_dir, sequence_name, file_name),
            os.path.join(img_dir, "imageFiles", sequence_name, file_name),
        ])
    
    for path in possible_paths:
        if os.path.exists(path):
            return path
    return None

def load_and_save_original_image(img_name, img_dir, output_path):
    """Load original image from 3DPW and save to output path."""
    img_path = find_original_image_3dpw(img_name, img_dir)
    
    if img_path and os.path.exists(img_path):
        # Read image
        img = cv2.imread(img_path)
        if img is not None:
            # Save image
            cv2.imwrite(str(output_path), img)
            return True
    
    # If not found, create placeholder
    placeholder = np.ones((512, 512, 3), dtype=np.uint8) * 200
    cv2.putText(placeholder, f'Image not found:', (50, 200), 
               cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 0, 0), 2)
    cv2.putText(placeholder, f'{img_name}', (50, 250), 
               cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 0, 0), 1)
    cv2.imwrite(str(output_path), placeholder)
    return False

def export_sampled_obj_files(vis_data_path, output_dir="sampled_obj_results", img_dir="3DPW-TEST"):
    """Export sampled meshes as OBJ files and find original images."""
    
    # Load data
    print(f"Loading data from {vis_data_path}...")
    data = np.load(vis_data_path, allow_pickle=True)
    
    output_dir = Path(output_dir)
    hmr2_dir = output_dir / "hmr2_meshes"
    optimized_dir = output_dir / "optimized_meshes"
    original_images_dir = output_dir / "original_images"
    stats_dir = output_dir / "statistics"
    
    for d in [hmr2_dir, optimized_dir, original_images_dir, stats_dir]:
        d.mkdir(parents=True, exist_ok=True)
    
    print(f"Available keys: {list(data.keys())}")
    
    # Get SMPL faces
    smpl_faces = data['smpl_faces'] if 'smpl_faces' in data else None
    if smpl_faces is not None:
        print(f"SMPL faces shape: {smpl_faces.shape}")
    else:
        print("Error: No SMPL faces found in data!")
        return
    
    total_samples = len(data['img_names'])
    print(f"Processing {total_samples} samples...")
    
    successful_exports = 0
    failed_exports = 0
    images_found = 0
    
    # Process all samples
    for i in tqdm(range(total_samples), desc="Exporting files"):
        try:
            # Get data
            img_path_from_data = data['img_names'][i]
            sequence_name = data['sequence_names'][i]
            img_name = Path(img_path_from_data).name
            img_stem = Path(img_name).stem
            
            # Create sequence-based subdirectories
            hmr2_seq_dir = hmr2_dir / sequence_name
            opt_seq_dir = optimized_dir / sequence_name
            orig_seq_dir = original_images_dir / sequence_name
            stats_seq_dir = stats_dir / sequence_name
            
            for d in [hmr2_seq_dir, opt_seq_dir, orig_seq_dir, stats_seq_dir]:
                d.mkdir(parents=True, exist_ok=True)
            
            hmr2_verts = data['hmr2_verts'][i]  # [6890, 3]
            opt_verts = data['opt_verts'][i]    # [6890, 3]
            
            # Generate filenames
            hmr2_filename = hmr2_seq_dir / f"{img_stem}_hmr2.obj"
            opt_filename = opt_seq_dir / f"{img_stem}_optimized.obj"
            orig_filename = orig_seq_dir / f"{img_stem}_original.jpg"
            stats_filename = stats_seq_dir / f"{img_stem}_stats.txt"
            
            # Save HMR2 mesh
            hmr2_success = save_mesh_as_obj(hmr2_verts, smpl_faces, hmr2_filename, f"{img_stem}_hmr2")
            
            # Save optimized mesh
            opt_success = save_mesh_as_obj(opt_verts, smpl_faces, opt_filename, f"{img_stem}_optimized")
            
            # Find and save original image from local 3DPW dataset
            image_found = load_and_save_original_image(img_path_from_data, img_dir, orig_filename)
            if image_found:
                images_found += 1
            
            if hmr2_success and opt_success:
                successful_exports += 1
                
                # Create statistics file
                create_statistics_file(hmr2_verts, opt_verts, img_path_from_data, sequence_name, stats_filename)
            else:
                failed_exports += 1
                
        except Exception as e:
            print(f"Error processing sample {i}: {e}")
            failed_exports += 1
            continue
    
    print(f"\nExport completed!")
    print(f"Successfully exported: {successful_exports} samples")
    print(f"Failed exports: {failed_exports}")
    print(f"Images found: {images_found}/{total_samples}")
    print(f"Total processed: {total_samples}")
    print(f"Results saved to: {output_dir}")

def create_statistics_file(hmr2_verts, opt_verts, img_path, sequence_name, stats_filename):
    """Create statistics file for the mesh comparison."""
    try:
        # Calculate basic statistics
        hmr2_center = hmr2_verts.mean(axis=0)
        opt_center = opt_verts.mean(axis=0)
        vertex_diff = np.linalg.norm(opt_verts - hmr2_verts, axis=1)
        
        with open(stats_filename, 'w') as f:
            f.write(f"3D Mesh Statistics\n")
            f.write(f"==================\n\n")
            f.write(f"Image path: {img_path}\n")
            f.write(f"Sequence: {sequence_name}\n\n")
            
            f.write(f"HMR2 (Before Optimization):\n")
            f.write(f"  Vertices: {hmr2_verts.shape}\n")
            f.write(f"  X Range: [{hmr2_verts[:, 0].min():.4f}, {hmr2_verts[:, 0].max():.4f}]\n")
            f.write(f"  Y Range: [{hmr2_verts[:, 1].min():.4f}, {hmr2_verts[:, 1].max():.4f}]\n")
            f.write(f"  Z Range: [{hmr2_verts[:, 2].min():.4f}, {hmr2_verts[:, 2].max():.4f}]\n")
            f.write(f"  Center: [{hmr2_center[0]:.4f}, {hmr2_center[1]:.4f}, {hmr2_center[2]:.4f}]\n\n")
            
            f.write(f"ScoreHMR (After Optimization):\n")
            f.write(f"  Vertices: {opt_verts.shape}\n")
            f.write(f"  X Range: [{opt_verts[:, 0].min():.4f}, {opt_verts[:, 0].max():.4f}]\n")
            f.write(f"  Y Range: [{opt_verts[:, 1].min():.4f}, {opt_verts[:, 1].max():.4f}]\n")
            f.write(f"  Z Range: [{opt_verts[:, 2].min():.4f}, {opt_verts[:, 2].max():.4f}]\n")
            f.write(f"  Center: [{opt_center[0]:.4f}, {opt_center[1]:.4f}, {opt_center[2]:.4f}]\n\n")
            
            f.write(f"Optimization Results:\n")
            f.write(f"  Vertex Difference (Mean): {vertex_diff.mean():.6f}\n")
            f.write(f"  Vertex Difference (Max): {vertex_diff.max():.6f}\n")
            f.write(f"  Vertex Difference (Std): {vertex_diff.std():.6f}\n")
            f.write(f"  Vertices with significant change (>1e-4): {np.sum(vertex_diff > 1e-4)}\n")
            f.write(f"  Total vertices: {len(vertex_diff)}\n")
            
    except Exception as e:
        print(f"Failed to create statistics file {stats_filename}: {e}")

def create_summary_report(vis_data_path, output_dir="sampled_obj_results"):
    """Create a summary report of the export."""
    data = np.load(vis_data_path, allow_pickle=True)
    
    report_path = Path(output_dir) / "export_summary.txt"
    
    with open(report_path, 'w') as f:
        f.write("ScoreHMR 3DPW-TEST Sampled OBJ Export Summary\n")
        f.write("============================================\n\n")
        
        f.write(f"Total samples processed: {len(data['img_names'])}\n")
        if 'sample_indices' in data:
            f.write(f"Original dataset indices: {data['sample_indices']}\n")
        f.write(f"Data keys: {list(data.keys())}\n\n")
        
        if 'sequence_names' in data:
            f.write("Sequence distribution:\n")
            from collections import Counter
            seq_counts = Counter(data['sequence_names'])
            for seq_name, count in seq_counts.most_common():
                f.write(f"  {seq_name}: {count} images\n")
            f.write("\n")
        
        if 'smpl_faces' in data:
            f.write(f"SMPL mesh information:\n")
            f.write(f"  Vertices per mesh: {data['hmr2_verts'].shape[1]}\n")
            f.write(f"  Faces: {data['smpl_faces'].shape[0]}\n")
            f.write(f"  Face vertices: {data['smpl_faces'].shape[1]}\n\n")
        
        f.write("Sample list:\n")
        for i, (img_name, seq_name) in enumerate(zip(data['img_names'], data['sequence_names'])):
            f.write(f"  {i+1:3d}. [{seq_name}] {img_name}\n")
    
    print(f"Summary report saved to: {report_path}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Export sampled 3DPW-TEST meshes as OBJ files.")
    parser.add_argument("--vis_data_path", type=str, default="xxx_vis_data/xxx_vis_data.npz", 
                       help="Path to visualization data file.")
    parser.add_argument("--output_dir", type=str, default="xxx_vis_results",
                       help="Output directory for files.")
    parser.add_argument("--img_dir", type=str, default="3DPW-TEST",
                       help="Root directory of local 3DPW dataset.")
    parser.add_argument("--summary", action="store_true", default=True,
                       help="Create summary report.")
    
    args = parser.parse_args()
    
    if os.path.exists(args.vis_data_path):
        export_sampled_obj_files(args.vis_data_path, args.output_dir, args.img_dir)
        
        if args.summary:
            create_summary_report(args.vis_data_path, args.output_dir)
    else:
        print(f"Visualization data not found at {args.vis_data_path}")
        print("Available files in current directory:")
        for f in Path(".").glob("*"):
            print(f"  {f}")
